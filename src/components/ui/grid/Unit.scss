@import '~styles/helpers';

$grids: 1, 2, 3, 4, 5, 6, 8, 12, 24;
$breakPoints: (
  sm: $sm-min,
  md: $md-min,
  lg: $lg-min,
  xl: $xl-min
);


.unit {
  display: inline-block;
  *display: inline; /* IE < 8: fake inline-block */
  zoom: 1;
  letter-spacing: normal;
  word-spacing: normal;
  vertical-align: top;
  text-rendering: auto;

  font-family: $font-primary;
}

// Unit sizes
@for $i from 1 through length($grids) {
  $grid: nth($grids, $i);
  @for $width from 1 through $grid {
    @if ($grid % $width != 0) or ($width == 1) {
      .unit-#{$width}-#{$grid} {
        composes: unit;
        width: percentage($width / $grid);
        *width: percentage($width / $grid);
      }
    }
  }
}

// Responsive unit sizes
@each $breakPoint, $mediaQuery in $breakPoints {
  @media #{$mediaQuery} {
    @for $i from 1 through length($grids) {
      $grid: nth($grids, $i);
      @for $width from 1 through $grid {
        @if ($grid % $width != 0) or ($width == 1) {
          .#{$breakPoint}-#{$width}-#{$grid} {
            width: percentage($width / $grid);
            *width: percentage($width / $grid);
          }
        }
      }
    }
  }
}


$gutters: (
  xs: $padding-xs,
  sm: $padding-sm,
  md: $padding-md,
  lg: $padding-lg,
  xl: $padding-xl
);

@each $gutter, $size in $gutters {
  .gutter-#{$gutter} {
    padding: $size / 2;
    &:before {
      position: absolute;
      top: #{$size / 2};
      left: #{$size / 2};
      bottom: #{$size / 2};
      right: #{$size / 2};
      z-index: -1;
    }
  }
}

.reverse {
  direction: ltr;
}
